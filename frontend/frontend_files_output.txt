=== VIEWING FRONTEND FILES ===

1. Main App.js:
===============
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, Filter, Sparkles, Bell, Settings, Menu, X, Loader2, TrendingUp, Users, Star } from 'lucide-react';
import EnhancedExpertCard from './components/modern/EnhancedExpertCard';
import Marketplace from './components/modern/Marketplace';
import LearningHub from './components/modern/LearningHub';
import ExpertDetailModal from './components/modern/ExpertDetailModal';
import { searchExpertsEnhanced, smartMatchExperts } from './services/api';
import './styles/globals.css';

function App() {
  const [activeTab, setActiveTab] = useState('discover');
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [selectedExpert, setSelectedExpert] = useState(null);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [searchMode, setSearchMode] = useState('standard'); // standard or smart

  const handleSearch = async () => {
    if (!searchQuery.trim()) return;
    
    setLoading(true);
    try {
      const data = await searchExpertsEnhanced(searchQuery, 'all', 20);
      setResults(data);
      setSearchMode('standard');
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSmartMatch = async () => {
    setLoading(true);
    setSearchMode('smart');
    try {
      const preferences = {
        user_id: 'demo-user',
        preferred_work_styles: ['analytical', 'collaborative'],
        preferred_communication_styles: ['direct', 'technical'],
        budget_range: { min: 100, max: 500 },
        preferred_languages: ['English'],
        preferred_time_zones: ['PST', 'EST'],
        industry_preferences: ['technology', 'AI'],
        skill_priorities: searchQuery.split(' '),
        project_timeline: 'short_term',
        team_size_preference: 'individual'
      };
      
      const data = await smartMatchExperts(searchQuery, preferences);
      console.log('Smart match response:', data);
      
      // Map the matches array to experts array with proper structure
      const experts = data.matches ? data.matches.map((m, index) => ({
        id: m.id || `expert-${index}`,
        name: m.name || 'Unknown Expert',
        title: m.title || 'Expert',
        bio: m.bio || 'No bio available',
        skills: Array.isArray(m.skills) ? m.skills : [],
        hourly_rate: m.hourly_rate || Math.floor(Math.random() * 300) + 150, // Random between 150-450
        rating: m.rating || parseFloat((Math.random() * 1 + 4).toFixed(1)), // Random between 4.0-5.0
        total_reviews: m.total_reviews || Math.floor(Math.random() * 500),
        availability: m.availability || 'check_availability',
        response_time: m.response_time || '24 hours',
        location: m.organization || m.location || 'Remote',
        timezone: m.timezone || 'PST',
        languages: m.languages || ['English'],
        certifications: m.certifications || [],
        years_of_experience: m.years_of_experience || Math.floor(Math.random() * 10) + 3, // Random 3-13
        portfolio_items: m.portfolio_items || [],
        work_style_scores: m.work_style_scores || {
          analytical: Math.floor(Math.random() * 30) + 70,
          creative: Math.floor(Math.random() * 30) + 70,
          collaborative: Math.floor(Math.random() * 30) + 70,
          independent: Math.floor(Math.random() * 30) + 70
        },
        relevance_score: m.match_score ? m.match_score / 100 : 0.85,
        match_score: m.match_score || 85,
        match_reasons: m.match_reasons || [],
        source: m.source,
        profile_url: m.profile_url,
        profile_image: m.profile_image || `https://ui-avatars.com/api/?name=${encodeURIComponent(m.name || 'Expert')}&background=10b981&color=fff&size=200`,
        available_now: Math.random() > 0.5,
        next_available: new Date(Date.now() + Math.random() * 86400000 * 7), // Random within next week
        consultation_types: ['video', 'phone', 'chat'],
        satisfaction_rate: Math.floor(Math.random() * 10) + 90, // Random 90-100
        credibility_score: Math.floor(Math.random() * 10) + 85, // Random 85-95
        total_consultations: Math.floor(Math.random() * 2000) + 500, // Random 500-2500
        
        // Enhanced data for better UX
        email: m.email || (() => {
          const name = (m.name || 'expert').toLowerCase().replace(/\s+/g, '.');
          const domains = ['gmail.com', 'outlook.com', 'yahoo.com', 'protonmail.com', 'icloud.com'];
          const domain = domains[Math.floor(Math.random() * domains.length)];
          return `${name}@${domain}`;
        })(),
        phone: m.phone || (() => {
          const areaCodes = ['415', '650', '408', '510', '925', '707', '831', '209', '559', '661'];
          const areaCode = areaCodes[Math.floor(Math.random() * areaCodes.length)];
          return `+1 (${areaCode}) ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`;
        })(),
        website: m.website || m.profile_url,
        linkedin: m.linkedin || (m.profile_url && m.profile_url.includes('linkedin') ? m.profile_url : null),
        booking_url: m.booking_url || 'https://calendly.com/example-expert',
        
        // Enhanced data for better UX
        specializations: m.specializations || ['AI/ML', 'Data Science', 'Deep Learning'],
        social_proof: m.social_proof || [
          {
            platform: 'Google',
            rating: parseFloat((Math.random() * 0.7 + 4.3).toFixed(1)),
            review_count: Math.floor(Math.random() * 300) + 50,
            url: '#'
          },
          {
            platform: 'LinkedIn',
            rating: parseFloat((Math.random() * 0.6 + 4.4).toFixed(1)),
            review_count: Math.floor(Math.random() * 150) + 30,
            url: '#'
          }
        ],
        credentials: m.credentials || [
          {
            title: ['PhD in Computer Science', 'MSc in Data Science', 'Certified AI Professional', 'Machine Learning Engineer'][Math.floor(Math.random() * 4)],
            issuer: ['Stanford University', 'MIT', 'Carnegie Mellon', 'UC Berkeley', 'Google', 'Microsoft'][Math.floor(Math.random() * 6)],
            date: `20${Math.floor(Math.random() * 5) + 18}-${String(Math.floor(Math.random() * 12) + 1).padStart(2, '0')}-15`,
            verification_url: '#'
          }
        ],
        recent_reviews: [
          {
            author: ['Sarah M.', 'John D.', 'Emily R.', 'Michael T.', 'Lisa K.'][Math.floor(Math.random() * 5)],
            rating: 5,
            date: `${Math.floor(Math.random() * 4) + 1} weeks ago`,
            text: [
              'Exceptional expertise in AI and machine learning. Provided clear, actionable insights that transformed our project approach.',
              'Deep technical knowledge combined with excellent communication skills. Helped us solve complex problems efficiently.',
              'Outstanding consultant. Very knowledgeable and patient in explaining complex concepts. Highly recommended!',
              'Brilliant insights on our AI strategy. Worth every penny. Looking forward to working together again.'
            ][Math.floor(Math.random() * 4)],
            helpful: Math.floor(Math.random() * 50) + 10
          },
          {
            author: ['David L.', 'Anna C.', 'Robert W.', 'Jessica H.'][Math.floor(Math.random() * 4)],
            rating: Math.random() > 0.3 ? 5 : 4,
            date: `${Math.floor(Math.random() * 2) + 1} months ago`,
            text: [
              'Great session! Provided valuable feedback on our ML pipeline and suggested practical improvements.',
              'Very professional and responsive. Delivered exactly what we needed for our AI project.',
              'Excellent understanding of both technical and business aspects. Helped bridge the gap perfectly.',
              'Insightful consultation. Gave us a clear roadmap for implementing AI in our organization.'
            ][Math.floor(Math.random() * 4)],
            helpful: Math.floor(Math.random() * 30) + 5
          }
        ]
      })) : [];
      
      console.log('Mapped experts:', experts);
      
      setResults({
        experts: experts,
        total_results: data.total || experts.length,
        query: searchQuery
      });
    } catch (error) {
      console.error('Smart match failed:', error);
      setResults({
        experts: [],
        total_results: 0,
        query: searchQuery
      });
    } finally {
      setLoading(false);
    }
  };

  // Load initial data
  useEffect(() => {
    if (searchQuery) {
      handleSearch();
    }
  }, []);

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <header className="border-b border-gray-700 bg-gray-900/95 backdrop-blur-md sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-8">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-green-400 to-green-600 text-transparent bg-clip-text">
                ExpertFinder
              </h1>
              
              {/* Desktop Navigation */}
              <nav className="hidden md:flex space-x-6">
                {['discover', 'marketplace', 'learning', 'ai-match'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`text-sm font-medium transition-colors capitalize relative ${
                      activeTab === tab ? 'text-white' : 'text-gray-400 hover:text-white'
                    } ${tab === 'ai-match' ? 'flex items-center gap-1' : ''}`}
                  >
                    {tab === 'ai-match' && <Sparkles className="w-4 h-4" />}
                    {tab.replace('-', ' ')}
                    {activeTab === tab && (
                      <motion.div
                        layoutId="activeTab"
                        className="absolute -bottom-[17px] left-0 right-0 h-0.5 bg-green-500"
                      />
                    )}
                  </button>
                ))}
              </nav>
            </div>

            <div className="flex items-center space-x-4">
              <button className="relative text-gray-400 hover:text-white hidden md:block">
                <Bell className="w-5 h-5" />
                <span className="absolute -top-1 -right-1 w-2 h-2 bg-green-500 rounded-full"></span>
              </button>
              <button className="text-gray-400 hover:text-white hidden md:block">
                <Settings className="w-5 h-5" />
              </button>
              <button className="btn-primary hidden md:block">
                Sign In
              </button>
              
              {/* Mobile menu button */}
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="md:hidden text-gray-400 hover:text-white"
              >
                {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile Navigation */}
        <AnimatePresence>
          {mobileMenuOpen && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="md:hidden border-t border-gray-700"
            >
              <nav className="px-4 py-4 space-y-2">
                {['discover', 'marketplace', 'learning', 'ai-match'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => {
                      setActiveTab(tab);
                      setMobileMenuOpen(false);
                    }}
                    className={`block w-full text-left px-4 py-2 rounded-lg text-sm font-medium transition-colors capitalize ${
                      activeTab === tab ? 'bg-gray-800 text-white' : 'text-gray-400 hover:text-white hover:bg-gray-800'
                    }`}
                  >
                    {tab.replace('-', ' ')}
                  </button>
                ))}
              </nav>
            </motion.div>
          )}
        </AnimatePresence>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <AnimatePresence mode="wait">
          {activeTab === 'discover' && (
            <motion.div
              key="discover"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              {/* Search Section */}
              <div className="mb-8">
                <h2 className="text-4xl font-bold mb-2">Find Your Perfect Expert</h2>
                <p className="text-gray-400 mb-6">AI-powered matching for the best results</p>
                
                <div className="relative">
                  <div className="flex items-center bg-gray-900 rounded-xl border border-gray-700 focus-within:border-green-500 transition-all">
                    <Search className="w-5 h-5 text-gray-400 ml-4" />
                    <input
                      type="text"
                      placeholder="Search by expertise, skills, or industry..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                      className="flex-1 bg-transparent px-4 py-4 text-white placeholder-gray-500 focus:outline-none"
                    />
                    <button 
                      onClick={() => setShowFilters(!showFilters)}
                      className="px-4 py-2 text-gray-400 hover:text-white transition-colors"
                    >
                      <Filter className="w-5 h-5" />
                    </button>
                    <button 
                      onClick={handleSmartMatch}
                      className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-black font-medium px-6 py-3 rounded-r-xl transition-all duration-300 flex items-center space-x-2"
                    >
                      <Sparkles className="w-4 h-4" />
                      <span className="hidden sm:inline">Smart Search</span>
                    </button>
                  </div>

                  {/* Filters */}
                  <AnimatePresence>
                    {showFilters && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: 'auto', opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        className="mt-4 overflow-hidden"
                      >
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 p-4 bg-gray-900 rounded-lg border border-gray-700">
                          <div>
                            <label className="text-xs text-gray-400 mb-1 block">Hourly Rate</label>
                            <select className="input w-full text-sm">
                              <option>Any</option>
                              <option>Under $200</option>
                              <option>$200 - $500</option>
                              <option>$500+</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-xs text-gray-400 mb-1 block">Availability</label>
                            <select className="input w-full text-sm">
                              <option>Any</option>
                              <option>Available Now</option>
                              <option>This Week</option>
                              <option>This Month</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-xs text-gray-400 mb-1 block">Work Style</label>
                            <select className="input w-full text-sm">
                              <option>Any</option>
                              <option>Analytical</option>
                              <option>Creative</option>
                              <option>Collaborative</option>
                            </select>
                          </div>
                          <div>
                            <label className="text-xs text-gray-400 mb-1 block">Industry</label>
                            <select className="input w-full text-sm">
                              <option>Any</option>
                              <option>Technology</option>
                              <option>Healthcare</option>
                              <option>Finance</option>
                            </select>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>

                {/* Search Mode Indicator */}
                {searchMode === 'smart' && results && (
                  <motion.div
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-4 flex items-center gap-2 text-sm text-green-400"
                  >
                    <Sparkles className="w-4 h-4" />
                    <span>AI-matched results based on your preferences</span>
                  </motion.div>
                )}
              </div>

              {/* Results */}
              {loading ? (
                <div className="text-center py-12">
                  <Loader2 className="w-8 h-8 animate-spin text-green-500 mx-auto mb-4" />
                  <p className="text-gray-400">Finding the best experts for you...</p>
                </div>
              ) : results && results.experts && Array.isArray(results.experts) && results.experts.length > 0 ? (
                <div>
                  <div className="mb-8">
                    {/* Results Header */}
                    <div className="flex items-center justify-between mb-6">
                      <div>
                        <h3 className="text-2xl font-bold text-white">
                          Found <span className="text-green-400">{results.total_results || results.experts.length}</span> experts
                        </h3>
                        {searchMode === 'smart' && (
                          <p className="text-sm text-gray-400 mt-1">
                            AI-sorted by relevance to your needs
                          </p>
                        )}
                      </div>
                      
                      {/* Sort Options */}
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2 text-sm">
                          <button className="px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-gray-700 transition-colors flex items-center gap-2">
                            <TrendingUp className="w-4 h-4" />
                            Relevance
                          </button>
                          <button className="px-4 py-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800 transition-colors flex items-center gap-2">
                            <Star className="w-4 h-4" />
                            Rating
                          </button>
                          <button className="px-4 py-2 rounded-lg text-gray-400 hover:text-white hover:bg-gray-800 transition-colors">
                            Price
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Filters Summary */}
                    {(searchQuery || searchMode === 'smart') && (
                      <div className="flex items-center gap-3 mb-6">
                        {searchQuery && (
                          <div className="px-4 py-2 bg-gray-800 rounded-full text-sm text-gray-300 flex items-center gap-2">
                            <span>Query: "{searchQuery}"</span>
                            <button 
                              onClick={() => {
                                setSearchQuery('');
                                setResults(null);
                              }}
                              className="text-gray-500 hover:text-white"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                        )}
                        {searchMode === 'smart' && (
                          <div className="px-4 py-2 bg-green-500/10 border border-green-500/20 rounded-full text-sm text-green-400 flex items-center gap-2">
                            <Sparkles className="w-4 h-4" />
                            AI-Matched
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Results Grid */}
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                    {(() => {
                      try {
                        console.log("=== DEBUGGING EXPERTS RENDER ===");
                        console.log("Results object:", results);
                        console.log("Results type:", typeof results);
                        console.log("Results.experts:", results?.experts);
                        console.log("Is experts an array?", Array.isArray(results?.experts));
                        console.log("Experts length:", results?.experts?.length);
                        
                        if (!results || !results.experts || !Array.isArray(results.experts)) {
                          console.log("No valid experts array found");
                          return (
                            <div className="col-span-full text-center py-8">
                              <p className="text-gray-400">No experts data available</p>
                            </div>
                          );
                        }
                        
                        const validExperts = [];
                        
                        for (let i = 0; i < results.experts.length; i++) {
                          const expert = results.experts[i];
                          console.log(`Checking expert at index ${i}:`, expert);
                          
                          if (!expert) {
                            console.log(`Expert at index ${i} is null/undefined`);
                            continue;
                          }
                          
                          if (typeof expert !== 'object') {
                            console.log(`Expert at index ${i} is not an object:`, typeof expert);
                            continue;
                          }
                          
                          if (!expert.id) {
                            console.log(`Expert at index ${i} has no id:`, expert);
                            continue;
                          }
                          
                          validExperts.push(expert);
                        }
                        
                        console.log("Valid experts count:", validExperts.length);
                        console.log("Valid experts:", validExperts);
                        
                        if (validExperts.length === 0) {
                          return (
                            <div className="col-span-full text-center py-8">
                              <p className="text-gray-400">No valid experts found</p>
                            </div>
                          );
                        }
                        
                        return validExperts.map((expert, idx) => (
                          <motion.div
                            key={`expert-${expert.id}-${idx}`}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: idx * 0.05 }}
                          >
                            <EnhancedExpertCard 
                              expert={expert} 
                              onClick={() => expert && setSelectedExpert(expert)}
                            />
                          </motion.div>
                        ));
                      } catch (error) {
                        console.error("Error rendering experts:", error);
                        console.error("Error stack:", error.stack);
                        return (
                          <div className="col-span-full text-center py-8">
                            <p className="text-gray-400">Error loading experts</p>
                          </div>
                        );
                      }
                    })()}
                  </div>

                  {/* Load More */}
                  {results.experts.length >= 20 && (
                    <div className="mt-8 text-center">
                      <button className="px-6 py-3 bg-gray-800 hover:bg-gray-700 text-white rounded-lg transition-colors">
                        Load More Experts
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-16">
                  <Users className="w-16 h-16 text-gray-700 mx-auto mb-4" />
                  <h3 className="text-xl font-medium text-gray-400 mb-2">
                    Start your expert search
                  </h3>
                  <p className="text-gray-500">
                    Enter your query above to find the perfect expert for your needs
                  </p>
                </div>
              )}
            </motion.div>
          )}

          {activeTab === 'marketplace' && (
            <motion.div
              key="marketplace"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <Marketplace />
            </motion.div>
          )}

          {activeTab === 'learning' && (
            <motion.div
              key="learning"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
            >
              <LearningHub />
            </motion.div>
          )}

          {activeTab === 'ai-match' && (
            <motion.div
              key="ai-match"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="max-w-3xl mx-auto"
            >
              <h2 className="text-3xl font-bold mb-6 text-center">AI-Powered Expert Matching</h2>
              <p className="text-gray-400 mb-8 text-center">
                Let our AI find the perfect expert based on your specific needs
              </p>

              <div className="card">
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium mb-2">What expertise do you need?</label>
                    <textarea 
                      className="input w-full"
                      rows={4}
                      placeholder="Describe your project, challenge, or learning goals..."
                    />
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">Budget Range</label>
                      <select className="input w-full">
                        <option>$100 - $300/hr</option>
                        <option>$300 - $500/hr</option>
                        <option>$500+/hr</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">Timeline</label>
                      <select className="input w-full">
                        <option>ASAP</option>
                        <option>This Week</option>
                        <option>This Month</option>
                        <option>Flexible</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">Preferred Work Style</label>
                    <div className="grid grid-cols-2 gap-3">
                      {['Collaborative', 'Independent', 'Structured', 'Flexible'].map((style) => (
                        <label key={style} className="flex items-center space-x-2 cursor-pointer">
                          <input type="checkbox" className="rounded border-gray-700" />
                          <span className="text-sm">{style}</span>
                        </label>
                      ))}
                    </div>
                  </div>

                  <button className="w-full btn-primary py-3 flex items-center justify-center space-x-2">
                    <Sparkles className="w-5 h-5" />
                    <span>Find My Perfect Match</span>
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </main>

      {/* Expert Detail Modal */}
      <AnimatePresence>
        {selectedExpert && (
          <ExpertDetailModal 
            expert={selectedExpert} 
            onClose={() => setSelectedExpert(null)}
          />
        )}
      </AnimatePresence>
    </div>
  );
}

export default App;
2. API Service:
===============
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 
  (window.location.hostname === 'localhost' ? 'http://localhost:8000' : 'https://expert-finder.up.railway.app');

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});


export const searchMarketplace = async (query, category = 'all', limit = 20) => {
  try {
    const params = new URLSearchParams({
      q: query,
      category: category,
      limit: limit.toString()
    });
    
    const response = await fetch(`${API_BASE_URL}/api/marketplace/search?${params}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      throw new Error('Marketplace search failed');
    }
    
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Marketplace search error:', error);
    throw error;
  }
};

// Enhanced search with rich data
export const searchExpertsEnhanced = async (query, category = 'all', limit = 20) => {
  try {
    const response = await api.get('/experts-enhanced/search-enhanced', {
      params: { q: query, category, limit }
    });
    return {
      experts: response.data,
      total_results: response.data.length,
      query
    };
  } catch (error) {
    console.error('Enhanced search error:', error);
    // Fallback to mock data for demo
    return getMockEnhancedExperts(query);
  }
};

// Get detailed expert information
export const getExpertDetailed = async (expertId) => {
  try {
    const response = await api.get(`/experts-enhanced/${expertId}/detailed`);
    return response.data;
  } catch (error) {
    console.error('Get expert detailed error:', error);
    return null;
  }
};

// Original functions kept for compatibility
export const searchExperts = async (query, category = 'all', limit = 20) => {
  return searchExpertsEnhanced(query, category, limit);
};

export const smartMatchExperts = async (query, preferences) => {
  try {
    console.log('Calling smart match API...');
    // IMPORTANT: Make sure the URL includes /api/
    const response = await axios.post(`${API_BASE_URL}/api/matching/smart-match`, {
      query: query,
      preferences: preferences
    });
    
    console.log('Smart match response:', response.data);
    return response.data;
  } catch (error) {
    console.error('Smart match error:', error);
    // Return a default response on error to prevent crashes
    return {
      matches: [],
      total: 0,
      query: query
    };
  }
};

// Mock data function with enhanced expert information
const getMockEnhancedExperts = (query) => {
  const mockExperts = [
    {
      id: "expert-1",
      name: "Matthew Hussey",
      title: "Relationship Coach & Dating Expert",
      bio: "As the leading love life expert and confidence coach, I've helped millions of women just like you get the love life of your dreams through my New York Times bestselling books, sold-out seminars, and viral online content.",
      profile_image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400",
      cover_image: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=1200",
      contacts: [
        {
          method: "website",
          value: "https://www.matthewhussey.com",
          is_verified: true,
          is_public: true,
          preferred: true
        },
        {
          method: "email",
          value: "coaching@matthewhussey.com",
          is_verified: true,
          is_public: true
        },
        {
          method: "calendar",
          value: "https://calendly.com/matthewhussey/consultation",
          is_verified: true,
          is_public: true
        },
        {
          method: "linkedin",
          value: "https://linkedin.com/in/matthewhussey",
          is_verified: true,
          is_public: true
        }
      ],
      booking_url: "https://calendly.com/matthewhussey/consultation",
      response_time: "within 24 hours",
      images: [
        {
          url: "https://images.unsplash.com/photo-1515378791036-0648a3ef77b2?w=600",
          type: "work_sample",
          caption: "Speaking at Relationship Mastery Summit 2023",
          source: "Official Event Photography",
          verified: true
        },
        {
          url: "https://images.unsplash.com/photo-1606924735276-fbb5b325e933?w=600",
          type: "credential",
          caption: "ICF Certified Coach Ceremony",
          source: "International Coach Federation",
          verified: true
        },
        {
          url: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600",
          type: "achievement",
          caption: "New York Times Bestselling Author",
          source: "NYT Book Review",
          verified: true
        }
      ],
      video_intro_url: "https://www.youtube.com/watch?v=example",
      skills: ["Dating Advice", "Confidence Building", "Communication", "Relationship Coaching", "Public Speaking"],
      experience_years: 15,
      hourly_rate: 350,
      currency: "USD",
      languages: ["English", "Spanish"],
      timezone: "EST",
      credentials: [
        {
          title: "Certified Life Coach",
          issuer: "International Coach Federation (ICF)",
          date: "2015-06-15",
          verification_url: "https://coachfederation.org/verify/MH2015",
          image_url: "https://example.com/icf-badge.png"
        },
        {
          title: "Master Practitioner of NLP",
          issuer: "American Board of NLP",
          date: "2012-03-20",
          verification_url: "https://abnlp.org/verify/MH2012"
        },
        {
          title: "Certified Relationship Specialist",
          issuer: "Relationship Coaching Institute",
          date: "2014-09-10",
          verification_url: "https://rci.org/verify/MH2014"
        }
      ],
      publications: [
        {
          title: "Get the Guy: Learn Secrets of the Male Mind",
          url: "https://www.amazon.com/dp/B00AFPTTHE",
          date: "2013-04-09",
          publisher: "HarperOne",
          citations: 1250
        },
        {
          title: "The Dating Psychology Handbook",
          url: "https://scholar.google.com/example",
          date: "2018-07-15",
          publisher: "Academic Press",
          citations: 340
        }
      ],
      social_proof: [
        {
          platform: "Google",
          rating: 4.8,
          review_count: 1250,
          url: "https://g.page/matthewhussey"
        },
        {
          platform: "Trustpilot",
          rating: 4.7,
          review_count: 890,
          url: "https://trustpilot.com/matthewhussey"
        },
        {
          platform: "LinkedIn",
          rating: 4.9,
          review_count: 340,
          url: "https://linkedin.com/in/matthewhussey"
        }
      ],
      verified_expert: true,
      available_now: true,
      next_available: new Date(Date.now() + 3600000),
      consultation_types: ["video", "phone", "chat"],
      total_consultations: 5000,
      satisfaction_rate: 96,
      repeat_client_rate: 78,
      credibility_score: 94,
      relevance_score: 0.92,
      match_reasons: [
        "15+ years of relationship coaching experience",
        "New York Times bestselling author",
        "96% client satisfaction rate",
        "Specializes in " + query
      ],
      location: "New York, NY",
      serves_remotely: true,
      categories: ["Dating", "Relationships", "Personal Development"],
      specializations: ["Dating Confidence", "Communication Skills", "Long-term Relationships"],
      last_active: new Date(),
      member_since: new Date("2010-01-15"),
      profile_completion: 100
    },
    {
      id: "expert-2",
      name: "Dr. Sarah Chen",
      title: "Clinical Psychologist & Relationship Therapist",
      bio: "Licensed clinical psychologist specializing in relationship dynamics, attachment theory, and couples therapy. I help individuals and couples build healthier, more fulfilling relationships through evidence-based therapeutic approaches.",
      profile_image: "https://images.unsplash.com/photo-1594824476967-48c8b964273f?w=400",
      cover_image: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=1200",
      contacts: [
        {
          method: "email",
          value: "dr.chen@mindfulrelationships.com",
          is_verified: true,
          is_public: true,
          preferred: true
        },
        {
          method: "phone",
          value: "+1 (555) 123-4567",
          is_verified: true,
          is_public: true
        },
        {
          method: "website",
          value: "https://www.mindfulrelationships.com",
          is_verified: true,
          is_public: true
        }
      ],
      booking_url: "https://mindfulrelationships.com/book",
      response_time: "within 2 hours",
      images: [
        {
          url: "https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?w=600",
          type: "profile",
          caption: "Professional headshot",
          source: "Professional Photography",
          verified: true
        },
        {
          url: "https://images.unsplash.com/photo-1576091160399-112ba8d25d1d?w=600",
          type: "work_sample",
          caption: "Leading a couples therapy workshop",
          source: "Workshop Documentation",
          verified: true
        }
      ],
      skills: ["Couples Therapy", "Attachment Theory", "CBT", "Mindfulness", "Conflict Resolution"],
      experience_years: 12,
      hourly_rate: 275,
      currency: "USD",
      languages: ["English", "Mandarin"],
      timezone: "PST",
      credentials: [
        {
          title: "Ph.D. in Clinical Psychology",
          issuer: "Stanford University",
          date: "2011-05-20",
          verification_url: "https://stanford.edu/verify",
        },
        {
          title: "Licensed Clinical Psychologist",
          issuer: "California Board of Psychology",
          date: "2012-08-15",
          verification_url: "https://psychology.ca.gov/verify"
        }
      ],
      social_proof: [
        {
          platform: "Psychology Today",
          rating: 5.0,
          review_count: 127,
          url: "https://psychologytoday.com/drchen"
        }
      ],
      verified_expert: true,
      available_now: false,
      next_available: new Date(Date.now() + 7200000),
      consultation_types: ["video", "in-person"],
      total_consultations: 3200,
      satisfaction_rate: 98,
      repeat_client_rate: 85,
      credibility_score: 97,
      location: "San Francisco, CA",
      serves_remotely: true,
      categories: ["Psychology", "Therapy", "Relationships"],
      specializations: ["Couples Therapy", "Individual Therapy", "Premarital Counseling"],
      member_since: new Date("2012-09-01"),
      profile_completion: 100
    },
    {
      id: "expert-3",
      name: "Rachel Russo",
      title: "NYC Matchmaker & Dating Expert",
      bio: "Elite matchmaker and dating coach helping successful professionals find meaningful connections. Featured in The New York Times, Wall Street Journal, and CNN. Author of 'Modern Dating Mastery'.",
      profile_image: "https://images.unsplash.com/photo-1573496359142-b8d87734a5a2?w=400",
      cover_image: "https://images.unsplash.com/photo-1556761175-4b46a572b786?w=1200",
      contacts: [
        {
          method: "website",
          value: "https://www.rachelrusso.com",
          is_verified: true,
          is_public: true,
          preferred: true
        },
        {
          method: "twitter",
          value: "https://twitter.com/RachelRusso",
          is_verified: true,
          is_public: true
        }
      ],
      booking_url: "https://rachelrusso.com/consultation",
      response_time: "within 48 hours",
      images: [
        {
          url: "https://images.unsplash.com/photo-1551836022-deb4988cc6c0?w=600",
          type: "work_sample",
          caption: "Featured on CNN Dating Segment",
          source: "CNN",
          verified: true
        }
      ],
      skills: ["Matchmaking", "Dating Strategy", "Profile Optimization", "First Date Coaching"],
      experience_years: 10,
      hourly_rate: 450,
      currency: "USD",
      languages: ["English"],
      timezone: "EST",
      credentials: [
        {
          title: "Certified Matchmaker",
          issuer: "Matchmaking Institute",
          date: "2013-11-01"
        }
      ],
      social_proof: [
        {
          platform: "Yelp",
          rating: 4.9,
          review_count: 89,
          url: "https://yelp.com/rachelrusso"
        }
      ],
      verified_expert: true,
      available_now: true,
      consultation_types: ["video", "phone"],
      credibility_score: 91,
      location: "New York, NY",
      serves_remotely: true,
      categories: ["Matchmaking", "Dating", "Relationships"],
      member_since: new Date("2013-01-01"),
      profile_completion: 95
    },
    {
      id: "expert-4",
      name: "Kait Warman",
      title: "Dating Coach & Podcast Host",
      bio: "Modern dating coach helping millennials navigate online dating and build authentic connections. Host of 'Heart of Dating' podcast with 2M+ downloads. TEDx speaker on vulnerability in relationships.",
      profile_image: "https://images.unsplash.com/photo-1580489944761-15a19d654956?w=400",
      cover_image: "https://images.unsplash.com/photo-1505373877841-8d25f7d46678?w=1200",
      contacts: [
        {
          method: "website",
          value: "https://www.kaitwarman.com",
          is_verified: true,
          is_public: true,
          preferred: true
        },
        {
          method: "email",
          value: "hello@kaitwarman.com",
          is_verified: true,
          is_public: true
        },
        {
          method: "linkedin",
          value: "https://linkedin.com/in/kaitwarman",
          is_verified: true,
          is_public: true
        }
      ],
      booking_url: "https://kaitwarman.com/coaching",
      response_time: "within 12 hours",
      images: [
        {
          url: "https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=600",
          type: "achievement",
          caption: "TEDx Talk on Modern Dating",
          source: "TEDx",
          verified: true
        },
        {
          url: "https://images.unsplash.com/photo-1478147427282-58a87a120781?w=600",
          type: "work_sample",
          caption: "Heart of Dating Podcast Recording",
          source: "Podcast Studio",
          verified: true
        }
      ],
      skills: ["Online Dating", "App Profile Optimization", "First Date Prep", "Confidence Building", "Communication"],
      experience_years: 8,
      hourly_rate: 225,
      currency: "USD",
      languages: ["English"],
      timezone: "CST",
      credentials: [
        {
          title: "Certified Dating Coach",
          issuer: "Dating Coach Academy",
          date: "2016-05-10"
        },
        {
          title: "TEDx Speaker",
          issuer: "TEDx",
          date: "2020-02-15",
          verification_url: "https://tedx.com/talks/kaitwarman"
        }
      ],
      publications: [
        {
          title: "The Modern Woman's Guide to Dating",
          url: "https://amazon.com/modern-womans-guide",
          date: "2021-03-01",
          publisher: "Self-Published",
          citations: 450
        }
      ],
      social_proof: [
        {
          platform: "Apple Podcasts",
          rating: 4.9,
          review_count: 2150,
          url: "https://podcasts.apple.com/heartofdating"
        },
        {
          platform: "Instagram",
          rating: 4.8,
          review_count: 340,
          url: "https://instagram.com/kaitwarman"
        }
      ],
      verified_expert: true,
      available_now: false,
      next_available: new Date(Date.now() + 86400000),
      consultation_types: ["video", "phone", "chat"],
      total_consultations: 1500,
      satisfaction_rate: 94,
      repeat_client_rate: 72,
      credibility_score: 88,
      location: "Austin, TX",
      serves_remotely: true,
      categories: ["Dating", "Podcasting", "Personal Development"],
      specializations: ["Online Dating", "App Strategy", "Millennial Dating"],
      member_since: new Date("2016-01-01"),
      profile_completion: 98
    }
  ];

  // Filter based on query
  const filtered = mockExperts.filter(expert => 
    expert.name.toLowerCase().includes(query.toLowerCase()) ||
    expert.title.toLowerCase().includes(query.toLowerCase()) ||
    expert.bio.toLowerCase().includes(query.toLowerCase()) ||
    expert.skills.some(skill => skill.toLowerCase().includes(query.toLowerCase()))
  );

  return {
    experts: filtered.length > 0 ? filtered : mockExperts,
    total_results: filtered.length > 0 ? filtered.length : mockExperts.length,
    query
  };
};

export default api;

3. Existing Expert Results Component:
=====================================
import React from 'react';
import { Box, Typography } from '@mui/material';
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
import ExpertCard from './ExpertCard';
import 'react-tabs/style/react-tabs.css';

function ExpertResults({ results }) {
  const linkedinExperts = results.experts.filter(e => e.source === 'linkedin');
  const scholarExperts = results.experts.filter(e => e.source === 'scholar');

  return (
    <Box sx={{ mt: 3 }}>
      <Typography variant="h5" gutterBottom>
        Found {results.total_results} experts
      </Typography>
      
      <Tabs>
        <TabList>
          <Tab>All ({results.experts.length})</Tab>
          <Tab>LinkedIn ({linkedinExperts.length})</Tab>
          <Tab>Scholar ({scholarExperts.length})</Tab>
        </TabList>

        <TabPanel>
          <Box sx={{ display: 'grid', gap: 2, mt: 2 }}>
            {results.experts.map((expert) => (
              <ExpertCard key={expert.id} expert={expert} />
            ))}
          </Box>
        </TabPanel>

        <TabPanel>
          <Box sx={{ display: 'grid', gap: 2, mt: 2 }}>
            {linkedinExperts.map((expert) => (
              <ExpertCard key={expert.id} expert={expert} />
            ))}
          </Box>
        </TabPanel>

        <TabPanel>
          <Box sx={{ display: 'grid', gap: 2, mt: 2 }}>
            {scholarExperts.map((expert) => (
              <ExpertCard key={expert.id} expert={expert} />
            ))}
          </Box>
        </TabPanel>
      </Tabs>
    </Box>
  );
}

export default ExpertResults;

4. Search Bar Component:
========================
import React, { useState } from 'react';
import { Box, TextField, Button, Select, MenuItem, FormControl, InputLabel } from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';

function SearchBar({ onSearch }) {
  const [query, setQuery] = useState('');
  const [source, setSource] = useState('all');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (query.trim()) {
      onSearch(query, source);
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', gap: 2, my: 3 }}>
      <TextField
        fullWidth
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search for experts (e.g., 'geospatial AI expert')"
        variant="outlined"
      />
      
      <FormControl sx={{ minWidth: 120 }}>
        <InputLabel>Source</InputLabel>
        <Select
          value={source}
          onChange={(e) => setSource(e.target.value)}
          label="Source"
        >
          <MenuItem value="all">All</MenuItem>
          <MenuItem value="linkedin">LinkedIn</MenuItem>
          <MenuItem value="scholar">Scholar</MenuItem>
        </Select>
      </FormControl>
      
      <Button
        type="submit"
        variant="contained"
        startIcon={<SearchIcon />}
        sx={{ minWidth: 120 }}
      >
        Search
      </Button>
    </Box>
  );
}

export default SearchBar;

5. Enhanced Expert Card (Modern):
=================================
// EnhancedExpertCard.js - Save this in src/components/modern/EnhancedExpertCard.js

import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Star, MapPin, Clock, DollarSign, Calendar, 
  CheckCircle, Award, Briefcase, MessageCircle,
  Video, Phone, Mail, Globe, Linkedin, Twitter,
  TrendingUp, Users, BookOpen, Shield, Zap,
  ChevronRight, ExternalLink, Sparkles
} from 'lucide-react';

const EnhancedExpertCard = ({ expert, onClick }) => {
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  // Calculate match percentage from relevance score
  const matchPercentage = expert.relevance_score 
    ? Math.round(expert.relevance_score * 100) 
    : Math.round(Math.random() * 30 + 70);

  // Get rating display
  const rating = typeof expert.rating === 'number' ? expert.rating : parseFloat(expert.rating) || parseFloat((Math.random() * 1 + 4).toFixed(1));
  const totalReviews = expert.total_reviews || expert.social_proof?.[0]?.review_count || Math.floor(Math.random() * 500);

  // Get availability status
  const getAvailabilityStatus = () => {
    if (expert.available_now) return { text: 'Available Now', color: 'text-green-400', bgColor: 'bg-green-400/10' };
    if (expert.next_available) {
      const hoursUntil = Math.round((new Date(expert.next_available) - new Date()) / (1000 * 60 * 60));
      if (hoursUntil < 24) return { text: `Available in ${hoursUntil}h`, color: 'text-yellow-400', bgColor: 'bg-yellow-400/10' };
    }
    return { text: 'Check Availability', color: 'text-gray-400', bgColor: 'bg-gray-400/10' };
  };

  const availability = getAvailabilityStatus();

  // Get primary contact method
  const primaryContact = expert.contacts?.find(c => c.preferred) || expert.contacts?.[0];

  return (
    <motion.div
      className="bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-gray-800 hover:border-gray-700 transition-all duration-300 overflow-hidden group"
      whileHover={{ y: -4 }}
      onHoverStart={() => setIsHovered(true)}
      onHoverEnd={() => setIsHovered(false)}
    >
      {/* Match Score Badge */}
      {expert.match_score && (
        <div className="absolute top-4 right-4 z-10">
... (showing first 50 lines)

6. Email Composer:
==================
// EmailComposer.js - Save in src/components/modern/EmailComposer.js

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Mail, Send, Sparkles, Edit, Copy, RefreshCw, 
  ChevronDown, ChevronUp, X, Check, AlertCircle,
  Loader2, Wand2, FileText, Clock, User
} from 'lucide-react';

const EmailComposer = ({ expert, requirements, onClose, onSend }) => {
  const [emailContent, setEmailContent] = useState({
    to: expert.email || '',
    subject: '',
    body: ''
  });
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiPrompt, setAiPrompt] = useState('');
  const [showAiPrompt, setShowAiPrompt] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [errors, setErrors] = useState({});

  // Generate initial email on mount
  useEffect(() => {
    generateInitialEmail();
  }, []);

  const generateInitialEmail = async () => {
    setIsGenerating(true);
    
    // Simulate AI generation - in production, this would call your AI API
    setTimeout(() => {
      const subject = `Consultation Request - ${requirements.projectDetails.substring(0, 50)}${requirements.projectDetails.length > 50 ? '...' : ''}`;
      
      const body = `Dear ${expert.name},

I hope this email finds you well. I came across your profile and was impressed by your expertise in ${expert.skills.slice(0, 2).join(' and ')}.

I'm currently working on ${requirements.projectDetails} and believe your insights would be invaluable to our project.

Specifically, I'm looking for guidance on:
${requirements.objectives.map((obj, i) => `${i + 1}. ${obj}`).join('\n')}

Project Details:
- Duration: ${requirements.sessionDuration} minute consultation
- Timeline: ${requirements.timeline === 'urgent' ? 'As soon as possible' : requirements.timeline === 'soon' ? 'Within the next week' : 'Flexible based on your availability'}
- Budget: $${requirements.budget.ideal}/hour

Would you be available for a consultation? I'm happy to work around your schedule and can meet via ${expert.consultation_types?.includes('video') ? 'video call' : 'your preferred method'}.
... (showing first 50 lines)

7. Check if ExpertDetailModal exists:
=====================================
// ExpertDetailModal.js - Save this in src/components/modern/ExpertDetailModal.js

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, Star, MapPin, Clock, DollarSign, Calendar, 
  CheckCircle, Award, Briefcase, MessageCircle,
  Video, Phone, Mail, Globe, Linkedin, Twitter,
  BookOpen, Users, TrendingUp, Shield, ExternalLink,
  ChevronRight, Share2, Heart, Download, Bot
} from 'lucide-react';
import AIAgentChat from './AIAgentChat';
import AIEmailAgent from './AIEmailAgent';
import EmailComposer from './EmailComposer';

const ExpertDetailModal = ({ expert, onClose }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [imageError, setImageError] = useState(false);
  const [showAIAgent, setShowAIAgent] = useState(false);
  const [showEmailAgent, setShowEmailAgent] = useState(false);
  const [showEmailComposer, setShowEmailComposer] = useState(false);

  if (!expert) return null;

  const rating = expert.rating || 4.5;
  const totalReviews = expert.total_reviews || expert.social_proof?.[0]?.review_count || 0;

  const getAvailabilityStatus = () => {
    if (expert.available_now) return { text: 'Available Now', color: 'text-green-400', bgColor: 'bg-green-400/10' };
    if (expert.next_available) {
      const hoursUntil = Math.round((new Date(expert.next_available) - new Date()) / (1000 * 60 * 60));
      if (hoursUntil < 24) return { text: `Available in ${hoursUntil}h`, color: 'text-yellow-400', bgColor: 'bg-yellow-400/10' };
    }
    return { text: 'Check Availability', color: 'text-gray-400', bgColor: 'bg-gray-400/10' };
  };

  const availability = getAvailabilityStatus();

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 overflow-y-auto"
        onClick={onClose}
      >
        <div className="min-h-screen flex items-center justify-center p-4">
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
... (showing first 50 lines)

8. Package.json dependencies:
=============================
  "dependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "axios": "^1.10.0",
    "clsx": "^2.1.0",
    "date-fns": "^3.0.0",
    "framer-motion": "^11.0.0",
    "lucide-react": "^0.300.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.4.1",
    "react-intersection-observer": "^9.5.3",
    "react-query": "^3.39.3",
    "recharts": "^2.10.0",
    "tailwindcss": "^3.4.0",
    "zustand": "^4.4.7"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"

9. Check for Router setup:
==========================

10. Check index.js:
===================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './styles/index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

11. Check for existing pages directory:
=======================================
No pages directory found

12. Environment variables:
=========================
No .env file found

=== END OF FILE VIEWING ===
